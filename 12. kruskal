#include <iostream>
#include <algorithm>

using namespace std;

struct Edge {
    int src, dest, weight;
};

struct Subset {
    int parent, rank;
};

int find(Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

void Union(Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

bool compare(Edge a, Edge b) {
    return a.weight < b.weight;
}

void KruskalMST(Edge edges[], int V, int E) {

    sort(edges, edges + E, compare);


    Subset* subsets = new Subset[V];


    for (int v = 0; v < V; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    int i = 0;
    int e = 0;


    Edge* MST = new Edge[V - 1];


    while (e < V - 1 && i < E) {
        Edge next_edge = edges[i++];

        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);

        if (x != y) {
            MST[e++] = next_edge;
            Union(subsets, x, y);
        }
    }


    cout << "Edges of the Minimum Spanning Tree:" << endl;
    for (i = 0; i < e; i++) {
        cout << MST[i].src << " -- " << MST[i].dest << " : " << MST[i].weight << endl;
    }

    delete[] subsets;
    delete[] MST;
}

int main() {

    int V, E;
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;

    Edge* edges = new Edge[E];

    cout << "Enter the source, destination, and weight of each edge:" << endl;
    for (int i = 0; i < E; i++) {
        cin >> edges[i].src >> edges[i].dest >> edges[i].weight;
    }

    KruskalMST(edges, V, E);

    delete[] edges;

    return 0;
}
